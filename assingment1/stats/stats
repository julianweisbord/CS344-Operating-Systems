#!/bin/bash -e
#Check if there are an incorrect number of command line arguments

#trap cleans up temporary files if the script is excited early.
trap "rm -f temp* d* ; exit" SIGHUP SIGINT SIGTERM

if [ "$#" -lt 1 ] || [ "$#" -ge 3 ]; then
  echo "Usage: stats {-rows|-cols} [file]" >&2 #send to stderr
  exit 1 #exit with error status 1
fi

##### Ben Brewster's hint #####
#takes input from stdin into file if no text file is used as an argument when this program is ran
datafilepath="datafile$$"
if [ "$#" = "1" ]; then
    cat > "$datafilepath" #'ctrl d' stops the cat into file
elif [ "$#" = "2" ]; then
    datafilepath=$2
fi

#Exits if there is no data in input
if ! [ -s $datafilepath ]; then
  echo "Empty File, exitting..."
  exit 1 #exit with error status 1
fi



##### Main Function #####
calc_avg(){ #Calculates mean and median, needs to take in rows or cols args


  check=1
  echo "Median Mean"
  while read line; do

    ####calc median####

    count_num=`wc -w <<< "$line"` # # of rows

    # The following is a series of manipulations to put the middle values in text files
    #Then these files are catted and the calculations are done
    firstHalf=$(( count_num / 2 ))

    firstHalf=$(expr $firstHalf + 1) #increment if odd

    secondHalf=`expr $count_num - $firstHalf`


    tempVar1=`echo $line > tempTest1.txt`


    tempVar2=`cat tempTest1.txt | tr ' ' '\n' | sort -n | head -n $firstHalf | tail -n 1 > tempTest2.txt`
    tempVar3=`cat tempTest1.txt | tr ' ' '\n' | sort -n | head -n $firstHalf | tail -n 2 > tempTest3.txt`

    if [ $((count_num % 2)) -eq 0 ]; then

      piper=`head -n 1 tempTest3.txt >tempTest4.txt`

      top=`cat tempTest2.txt`
      bot=`cat tempTest4.txt`
      echo $bot
      echo $top

      if [ $bot -gt $top ]; then
        median=$bot
        printf "$median \t"

      else
        median=$top
        printf "$median \t"
      fi
    else
      median=`cat tempTest2.txt`
      printf "$median \t"
    fi

    for char in $line; do #calc average

      sum=$((char + sum))

    done

    # Rounding algorithm for Half Round Up
    testSumOne=$((sum % count_num))
    testSumTwo=$((testSumOne * 10))
    if [ $(( testSumTwo / count_num )) -ge 5 ]; then
      denom=$(expr $count_num - 1)
      sum=$(expr $sum + $denom) #increment if odd
    fi
    mean=`echo $(( sum / count_num ))`

    echo "$mean "
    sum=0
  done < $datafilepath
}

##### Ben Brewster's hint #####
if [[ $1 == -r* ]]; then
    echo "calculating row stats";
    calc_avg
    # Redundant deletion of files
    rm -f temp*
    rm -f d*

elif [[ $1 == -c* ]]; then
   echo "calculating column stats";
   arg="c"
   calc_avg $arg

   # Redundant deletion of files
   rm -f temp*
   rm -f d*

else
  >&2 echo "Invalid commandline arguments." #send to stderr

  exit 1
fi


exit 0 #exit with no errors
